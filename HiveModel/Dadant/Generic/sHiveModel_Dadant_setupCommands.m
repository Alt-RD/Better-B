%  This file is part of project HiveTemp.
%
%  Copyright (c) 2022: Montpellier University / CoActions-AltRD-Emmanuel Ruffio
%  Author: emmanuel.ruffio@gmail.com
%
%  HiveTemp is free software: you can redistribute it and/or modify
%  it under the terms of the GNU General Public License as published by
%  the Free Software Foundation, either version 3 of the License, or
%  any later version.
%
%  HiveTemp is distributed in the hope that it will be useful,
%  but WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%  GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with HiveTemp.  If not, see <https://www.gnu.org/licenses/>
% ========================================================================




% ========================================================================
%                          PRELIMINAR COMPUTATIONS
% ========================================================================
% Retrieve the sun position at current date time
[zenithAngle azimuthAngle] = HT_GetSolarAngle(...
                                lHiveParams.date(1),                    ... Year
                                lHiveParams.date(2:3),                  ... [Month Day]
                                sum(lHiveParams.time .* [3600 60 1]) +  ...
                                  lComputation.startTime + (0:(lComputation.nt-1)) * lComputation.timeStep,          ... Day time
                                lHiveParams.longitude,                  ... Longitude
                                lHiveParams.latitude);                  %  Latitude

% Retrieve the cosine of angle between each hive faces and the sun
% Each row of < cosBeta (dim Nx6) > refers to a different time step
% XM, XP, YM, YP, ZM, ZP (top)
[cosBeta] = HT_GetHiveSolarAngles(...
                          zenithAngle,                                  ... % Sun zenith angle (90°=sun at horizon)
                          azimuthAngle,                                 ... % Sun azimuth angle (radian)
                          [lHiveParams.azimuth, lHiveParams.tilt],      ...
                          struct('angle', true));                       % angle=true means previous
                                                                        %  argument is expressed as [azimuth tilt]

% Roof and roof sides: Retrieve the exposition coefficient (negative values are clamped to 0)
lRoofExpositionMat = HT_GetSolarFluxFactor(   ...
                          cosBeta,            ... % Cosine between face and sun for each faces
                          [HT_Material_GetEmissivity(lHiveMat.roofsides_ext, HT_WAVELENGTH_VISIBLE)*ones(1,4), ... XM, XP, YM, YP
                            0, HT_Material_GetEmissivity(lHiveMat.roof_ext, HT_WAVELENGTH_VISIBLE)]);

% Side walls: Exposition coefficient
lHiveBodySWExpositionMat = HT_GetSolarFluxFactor(   ...
                          cosBeta,                  ... % Cosine between face and sun for each faces
                          [HT_Material_GetEmissivity(lHiveMat.sidewalls, HT_WAVELENGTH_VISIBLE)*ones(1,4), ... XM, XP, YM, YP
                            0, 0]);

% Nullify exposition coefficients when the sun is below the horizon
% i.e. when zenith angle is higher than 90°=pi/2
##lExpositionMat(zenithAngle >= pi/2, :) = 0;
lZenithAttenuation = 0.8; % Voir Solar Irradiance on Wikipedia (radiation at ground level over/extra atmosphere) with at zenith
lSolarIrradiance = 1361 * exp(log(lZenithAttenuation) ./ max(0.0, cos(zenithAngle)));
% Multiply each line by the solar irradiance
lHiveBodySWExpositionMat = lSolarIrradiance .* lHiveBodySWExpositionMat;
% Retrieve the area of each external faces
##lAreaFaces = HT_Face_GetAbsoluteData(cellfun(@(v) v(FaceXP), lWallFaces, 'UniformOutput', false), 'area');
% Multiply each columns by the face area
##lSolarRadiationMat = lExpositionMat .* cell2mat(lAreaFaces)';

clear lAreaFaces lSolarIrradiance lZenithAttenuation cosBeta zenithAngle azimuthAngle; % lExpositionMat

% ========================================================================
%                              COMMANDS
% ========================================================================
lCmd = HT_Cmd_Init(
        'name', 'cmd_airext', ...
          'type', 'temperature', ...
          'nodes', 'nAirExt', ...
          'data', 10); ...
##        'name', 'test', ...
##          'type', 'flux', ...
##          'nodes', { lRoofSide_faces{FaceXM}(FaceZP) } , ...
##          'data', 1000, ...
##        'name', 'testTemp', ...
##          'type', 'temperature',...
##          'data', 15, ...
##          'nodes',  lRoofSide_faces{FaceXM}(FaceZP)); %.nodes(1) );
##        'name', 'cmd_sun_xm', ...
##          'type', 'flux', ...
##          'nodes', lRoofSide_faces{FaceXM}(FaceZP).nodes, ...
##          'data', lSolarRadiationMat(:,FaceXM), ...
##        'name', 'cmd_sun_xp', ...
##          'type', 'flux', ...
##          'nodes', lRoofSide_faces{FaceXP}(FaceZP).nodes, ...
##          'data', lSolarRadiationMat(:,FaceXP), ...
##        'name', 'cmd_sun_ym', ...
##          'type', 'flux', ...
##          'nodes', lRoofSide_faces{FaceYM}(FaceZP).nodes, ...
##          'data', lSolarRadiationMat(:,FaceYM), ...
##        'name', 'cmd_sun_yp', ...
##          'type', 'flux', ...
##          'nodes', lRoofSide_faces{FaceYP}(FaceZP).nodes, ...
##          'data', lSolarRadiationMat(:,FaceYP), ...
##        'name', 'cmd_sun_zp',     ...
##          'type', 'flux',         ...
##          'nodes', lMod_Roof_faces(FaceZP).nodes, ... Roof face
##          'data', lSolarRadiationMat(:,FaceZP));


