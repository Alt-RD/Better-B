%  This file is part of project HiveTemp.
%
%  Copyright (c) 2022: Montpellier University / CoActions-AltRD-Emmanuel Ruffio
%  Author: emmanuel.ruffio@gmail.com
%
%  HiveTemp is free software: you can redistribute it and/or modify
%  it under the terms of the GNU General Public License as published by
%  the Free Software Foundation, either version 3 of the License, or
%  any later version.
%
%  HiveTemp is distributed in the hope that it will be useful,
%  but WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%  GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with HiveTemp.  If not, see <https://www.gnu.org/licenses/>
% ========================================================================
%
% ========================================================================
%                              PARAMETERS
% ========================================================================

% Add the thermal conductivity of the hive sides and the overframe
% to the sensitivity analysis.
lSensitivityAnalysis = HT_Sensitivity_BuildNewParameter(...
  'name', {'wall lambda', 'overframe lambda'}, ...
  'fields', {'hiveMat.sidewalls', 'hiveMat.overframe'}, ...
  'type', 'scale', ...
  'epsilon', lSensitivityParams.multEpsilon, ...
  'getter', @(object) HT_Material_GetLambda(object, 1), ...
  'setter', @(object,value) HT_Material_SetLambda(object, value));


lSensitivityAnalysis = [lSensitivityAnalysis, ...
  HT_Sensitivity_BuildNewParameter(...
  'name', {'roof albedo',}, ...
  'fields', {'hiveMat.roof_ext'}, ...
  'type', 'scale', ...
  'epsilon', lSensitivityParams.multEpsilon, ...
  'getter', @(object) HT_Material_GetEmissivity(object, HT_WAVELENGTH_VISIBLE), ...
  'setter', @(object,value) HT_Material_SetEmissivity(object, 'update', [HT_WAVELENGTH_VISIBLE value]))]; % Specify the function to be used to update the roof emissivity

% Add other parameters for sensitivity analysis.
% Since the objects are different from previous ones (materials)
% the getter/setter functions differ.
##lSensitivityAnalysis = [lSensitivityAnalysis, ...
##  HT_Sensitivity_BuildNewParameter(...
##  'name', {'wall thickness',}, ...
##  'fields', {'hiveParams.wallThickness'}, ...
##  'type', 'scale', ...
##  'epsilon', lSensitivityParams.multEpsilon)];

##  underroofThickness

##lSensitivityAnalysis = struct(...
##  'name', 'wall lambda',...
##  'fields', {{'hiveMat', 'sidewalls'}}, ...
##  'setterNext', @(params) setfield(params, {1}, 'hiveMat', {1}, 'sidewalls', HT_Material_SetLambda(params.hiveMat.sidewalls, 'multiply', 1+lSensitivityParams.multEpsilon)), ...
##  'setterPrev', @(params) setfield(params, {1}, 'hiveMat', {1}, 'sidewalls', HT_Material_SetLambda(params.hiveMat.sidewalls, 'multiply', 1-lSensitivityParams.multEpsilon)), ...
##  'getUserData', @(params) HT_Material_GetLambda(params.hiveMat.sidewalls, 1), ...
##  'compute', @(userData, Xp, Xn) (Xn-Xp) / (2*userData*lSensitivityParams.multEpsilon));
##
##lSensitivityAnalysis = [lSensitivityAnalysis;
##  struct(...
##  'name', 'overframe lambda',...
##  'fields', {{'hiveMat', 'overframe'}}, ...
##  'setterNext', @(params) setfield(params, {1}, 'hiveMat', {1}, 'overframe', HT_Material_SetLambda(params.hiveMat.overframe, 'multiply', 1+lSensitivityParams.multEpsilon)), ...
##  'setterPrev', @(params) setfield(params, {1}, 'hiveMat', {1}, 'overframe', HT_Material_SetLambda(params.hiveMat.overframe, 'multiply', 1-lSensitivityParams.multEpsilon)), ...
##  'getUserData', @(params) HT_Material_GetLambda(params.hiveMat.overframe, 1), ...
##  'compute', @(userData, Xp, Xn) (Xn-Xp) / (2*userData*lSensitivityParams.multEpsilon));
##  ];

##lSensitivityAnalysis = [lSensitivityAnalysis;
##  HT_Sensitivity_BuildNewParameter('name', {'overframe lambda'}, ...
##                                    'field', {'hiveMat.overframe'}, ...
##                                    'epsilon', lSensitivityParams.multEpsilon)];




